use crate::teletext::TeletextChar;
use core::fmt::Debug;

#[allow(dead_code)]
#[derive(Debug, Default, Copy, Clone)]
pub enum NationalOptionCharacterSubset {
    None, // Cannot be selected directly but can be used by enhancement packets

    #[default]
    English,
    German,
    Swedish,
    Finnish,
    Hungarian,
    Italian,
    French,
    Portuguese,
    Spanish,
    Czech,
    Slovak,
}

#[derive(Debug, Default, Copy, Clone)]
pub enum Diacritical {
    #[default]
    None,
    Grave,
    Acute,
    Circumflex,
    Tilde,
    Macron,
    Breve,
    Dot,
    Umlaut,
    DotBelow,
    Ring,
    Cedilla,
    #[allow(dead_code)]
    LowLine,
    DoubleAcute,
    Ogonek,
    Caron,
}

pub enum CharacterSet {
    G0,
    G0WithDiacritical(Diacritical),
    G2,
    G3,
}

impl NationalOptionCharacterSubset {
    fn has_char(&self, ch: char) -> Option<u8> {
        use NationalOptionCharacterSubset::*;

        macro_rules! subset_code {
            ($pattern:pat, $code:expr) => {
                match self {
                    $pattern => $code,
                    _ => return Option::None,
                }
            };
        }

        Some(match ch {
            '#' => match self {
                English | French | Italian => 0x5f,
                None | Czech | Slovak | German | Swedish | Finnish => 0x23,
                _ => return Option::None,
            },
            // English
            '£' => subset_code!(English | Italian, 0x23),
            '$' => subset_code!(English | German | Italian | Portuguese | Spanish, 0x24),
            '@' => subset_code!(English | None, 0x40),
            '←' => subset_code!(English, 0x5b),
            '½' => subset_code!(English, 0x5c),
            '→' => subset_code!(English | Italian, 0x5d),
            '↑' => subset_code!(English | Italian, 0x5e),
            '—' => subset_code!(English, 0x60),
            '¼' => subset_code!(English, 0x7b),
            '‖' => subset_code!(English, 0x7c),
            '¾' => subset_code!(English, 0x7d),
            '÷' => subset_code!(English, 0x7e),
            // German
            '§' => subset_code!(German, 0x40),
            'Ä' => subset_code!(German | Swedish | Finnish, 0x5b),
            'Ö' => subset_code!(German | Swedish | Finnish, 0x5c),
            'Ü' => subset_code!(German | Swedish | Finnish, 0x5d),
            '^' => subset_code!(German | None, 0x5e),
            '_' => subset_code!(German | None, 0x5f),
            '°' => subset_code!(German, 0x60),
            'ä' => subset_code!(German | Swedish | Finnish, 0x7b),
            'ö' => subset_code!(German | Swedish | Finnish, 0x7c),
            'ü' => subset_code!(German, 0x7d),
            'ß' => subset_code!(German, 0x7e),

            // None
            '¤' => subset_code!(None, 0x24),
            '[' => subset_code!(None, 0x5B),
            '\\' => subset_code!(None, 0x5C),
            ']' => subset_code!(None, 0x5D),
            '`' => subset_code!(None, 0x60),
            '{' => subset_code!(None, 0x7B),
            '|' => subset_code!(None, 0x7C),
            '}' => subset_code!(None, 0x7D),
            '~' => subset_code!(None, 0x7E),

            _ => return Option::None,
        })
    }
}

impl Diacritical {
    pub fn code(&self) -> u8 {
        match self {
            Diacritical::None => 0x0,
            Diacritical::Grave => 0x1,
            Diacritical::Acute => 0x2,
            Diacritical::Circumflex => 0x3,
            Diacritical::Tilde => 0x4,
            Diacritical::Macron => 0x5,
            Diacritical::Breve => 0x6,
            Diacritical::Dot => 0x7,
            Diacritical::Umlaut => 0x8,
            Diacritical::DotBelow => 0x9,
            Diacritical::Ring => 0xA,
            Diacritical::Cedilla => 0xB,
            Diacritical::LowLine => 0xC,
            Diacritical::DoubleAcute => 0xD,
            Diacritical::Ogonek => 0xE,
            Diacritical::Caron => 0xF,
        }
    }
}

fn g0_set(ch: char, subset: NationalOptionCharacterSubset) -> Option<TeletextChar> {
    Some(TeletextChar(match ch {
        ' ' => 0x20,
        '!' => 0x21,
        '"' => 0x22,
        '%' => 0x25,
        '&' => 0x26,
        '\'' => 0x27,
        '(' => 0x28,
        ')' => 0x29,
        '*' if !matches!(subset, NationalOptionCharacterSubset::None) => 0x2a,
        '+' => 0x2b,
        ',' => 0x2c,
        '-' => 0x2d,
        '.' => 0x2e,
        '/' => 0x2f,

        '0'..='9' => (ch as u8) - b'0' + 0x30,
        ':' => 0x3a,
        ';' => 0x3b,
        '<' => 0x3c,
        '=' => 0x3d,
        '>' => 0x3e,
        '?' => 0x3f,

        'A'..='Z' => (ch as u8) - b'A' + 0x41,
        'a'..='z' => (ch as u8) - b'a' + 0x61,
        '█' => 0x7f,

        // Used for spacing attributes and direct character access
        '\u{E000}'..='\u{E07F}' => (ch as u32 - 0xE000) as u8,

        _ => subset.has_char(ch)?,
    }))
}

fn g2_set(ch: char) -> Option<TeletextChar> {
    Some(TeletextChar(match ch {
        '¡' => 0x21,
        '¢' => 0x22,
        '£' => 0x23,
        '$' => 0x24,
        '¥' => 0x25,
        '#' => 0x26,
        '§' => 0x27,
        '¤' => 0x28,
        '‘' => 0x29,
        '“' => 0x2A,
        '«' => 0x2B,
        '←' => 0x2C,
        '↑' => 0x2D,
        '→' => 0x2E,
        '↓' => 0x2F,

        '°' => 0x30,
        '±' => 0x31,
        '²' => 0x32,
        '³' => 0x33,
        '×' => 0x34,
        'µ' => 0x35,
        '¶' => 0x36,
        '⋅' => 0x37,
        '÷' => 0x38,
        '’' => 0x39,
        '”' => 0x3A,
        '»' => 0x3B,
        '¼' => 0x3C,
        '½' => 0x3D,
        '¾' => 0x3E,
        '¿' => 0x3F,

        ' ' => 0x40,
        '̀' => 0x41,
        '́' => 0x42,
        '̂' => 0x43,
        '̃' => 0x44,
        '̄' => 0x45,
        '̆' => 0x46,
        '̇' => 0x47,
        '̈' => 0x48,
        '̣' => 0x49,
        '̊' => 0x4A,
        '̧' => 0x4B,
        '̲' => 0x4C,
        '̋' => 0x4D,
        '̨' => 0x4E,
        '̌' => 0x4F,

        '—' | '―' => 0x50,
        '¹' => 0x51,
        '®' => 0x52,
        '©' => 0x53,
        '™' => 0x54,
        '♪' | '🎵' => 0x55,
        '₠' => 0x56,
        '‰' => 0x57,
        'α' => 0x58,
        '⅛' => 0x5C,
        '⅜' => 0x5D,
        '⅝' => 0x5E,
        '⅞' => 0x5F,

        'Ω' => 0x60,
        'Æ' => 0x61,
        'Đ' => 0x62,
        'ª' => 0x63,
        'Ħ' => 0x64,
        'Ĳ' => 0x66,
        'Ŀ' => 0x67,
        'Ł' => 0x68,
        'Ø' => 0x69,
        'Œ' => 0x6A,
        'º' => 0x6B,
        'Þ' => 0x6C,
        'Ŧ' => 0x6D,
        'Ŋ' => 0x6E,
        'ŉ' => 0x6F,

        'ĸ' => 0x70,
        'æ' => 0x71,
        'đ' => 0x72,
        'ð' => 0x73,
        'ħ' => 0x74,
        'ı' => 0x75,
        'ĳ' => 0x76,
        'ŀ' => 0x77,
        'ł' => 0x78,
        'ø' => 0x79,
        'œ' => 0x7A,
        'ß' => 0x7B,
        'þ' => 0x7C,
        'ŧ' => 0x7D,
        'ŋ' => 0x7E,

        _ => return None,
    }))
}

fn g3_set(ch: char) -> Option<TeletextChar> {
    Some(TeletextChar(match ch {
        '🬼' => 0x20,
        '🬽' => 0x21,
        '🬾' => 0x22,
        '🬿' => 0x23,
        '🭀' => 0x24,
        '◣' => 0x25,
        '🭁' => 0x26,
        '🭂' => 0x27,
        '🭃' => 0x28,
        '🭄' => 0x29,
        '🭅' => 0x2A,
        '🭆' => 0x2B,
        '🭨' => 0x2C,
        '🭩' => 0x2D,
        '🭰' => 0x2E,
        '▒' => 0x2F,

        '🭇' => 0x30,
        '🭈' => 0x31,
        '🭉' => 0x32,
        '🭊' => 0x33,
        '🭋' => 0x34,
        '◢' => 0x35,
        '🭌' => 0x36,
        '🭍' => 0x37,
        '🭎' => 0x38,
        '🭏' => 0x39,
        '🭐' => 0x3A,
        '🭑' => 0x3B,
        '🭪' => 0x3C,
        '🭫' => 0x3D,
        '🭵' => 0x3E,
        '█' => 0x3F,

        '┷' => 0x40,
        '┯' => 0x41,
        '┝' => 0x42,
        '┥' => 0x43,
        '🮤' => 0x44,
        '🮥' => 0x45,
        '🮦' => 0x46,
        '🮧' => 0x47,
        '🮠' => 0x48,
        '🮡' => 0x49,
        '🮢' => 0x4A,
        '🮣' => 0x4B,
        '┿' => 0x4C,
        '•' => 0x4D,
        '●' => 0x4E,
        '○' => 0x4F,

        '│' => 0x50,
        '─' => 0x51,
        '┌' => 0x52,
        '┐' => 0x53,
        '└' => 0x54,
        '┘' => 0x55,
        '├' => 0x56,
        '┤' => 0x57,
        '┬' => 0x58,
        '┴' => 0x59,
        '┼' => 0x5A,
        '⭢' => 0x5B,
        '⭠' => 0x5C,
        '⭡' => 0x5D,
        '⭣' => 0x5E,

        '🭒' => 0x60,
        '🭓' => 0x61,
        '🭔' => 0x62,
        '🭕' => 0x63,
        '🭖' => 0x64,
        '◥' => 0x65,
        '🭗' => 0x66,
        '🭘' => 0x67,
        '🭙' => 0x68,
        '🭚' => 0x69,
        '🭛' => 0x6A,
        '🭜' => 0x6B,
        '🭬' => 0x6C,
        '🭭' => 0x6D,

        '🭝' => 0x70,
        '🭞' => 0x71,
        '🭟' => 0x72,
        '🭠' => 0x73,
        '🭡' => 0x74,
        '◤' => 0x75,
        '🭢' => 0x76,
        '🭣' => 0x77,
        '🭤' => 0x78,
        '🭥' => 0x79,
        '🭦' => 0x7A,
        '🭧' => 0x7B,
        '🭮' => 0x7C,
        '🭯' => 0x7D,
        _ => return None,
    }))
}

fn g0_set_with_diacriticals(ch: char) -> Option<(TeletextChar, Diacritical)> {
    let (base, diacritical) = match ch {
        'À' => ('A', Diacritical::Grave),
        'à' => ('a', Diacritical::Grave),
        'È' => ('E', Diacritical::Grave),
        'è' => ('e', Diacritical::Grave),
        'Ì' => ('I', Diacritical::Grave),
        'ì' => ('i', Diacritical::Grave),
        'Ǹ' => ('N', Diacritical::Grave),
        'ǹ' => ('n', Diacritical::Grave),
        'Ò' => ('O', Diacritical::Grave),
        'ò' => ('o', Diacritical::Grave),
        'Ù' => ('U', Diacritical::Grave),
        'ù' => ('u', Diacritical::Grave),
        'Ẁ' => ('W', Diacritical::Grave),
        'ẁ' => ('w', Diacritical::Grave),
        'Ỳ' => ('Y', Diacritical::Grave),
        'ỳ' => ('y', Diacritical::Grave),

        'Á' => ('A', Diacritical::Acute),
        'á' => ('a', Diacritical::Acute),
        'Ć' => ('C', Diacritical::Acute),
        'ć' => ('c', Diacritical::Acute),
        'É' => ('E', Diacritical::Acute),
        'é' => ('e', Diacritical::Acute),
        'Ǵ' => ('G', Diacritical::Acute),
        'ǵ' => ('g', Diacritical::Acute),
        'Í' => ('I', Diacritical::Acute),
        'í' => ('i', Diacritical::Acute),
        'Ḱ' => ('K', Diacritical::Acute),
        'ḱ' => ('k', Diacritical::Acute),
        'Ĺ' => ('L', Diacritical::Acute),
        'ĺ' => ('l', Diacritical::Acute),
        'Ḿ' => ('M', Diacritical::Acute),
        'ḿ' => ('m', Diacritical::Acute),
        'Ń' => ('N', Diacritical::Acute),
        'ń' => ('n', Diacritical::Acute),
        'Ó' => ('O', Diacritical::Acute),
        'ó' => ('o', Diacritical::Acute),
        'Ṕ' => ('P', Diacritical::Acute),
        'ṕ' => ('p', Diacritical::Acute),
        'Ŕ' => ('R', Diacritical::Acute),
        'ŕ' => ('r', Diacritical::Acute),
        'Ś' => ('S', Diacritical::Acute),
        'ś' => ('s', Diacritical::Acute),
        'Ú' => ('U', Diacritical::Acute),
        'ú' => ('u', Diacritical::Acute),
        'Ẃ' => ('W', Diacritical::Acute),
        'ẃ' => ('w', Diacritical::Acute),
        'Ý' => ('Y', Diacritical::Acute),
        'ý' => ('y', Diacritical::Acute),
        'Ź' => ('Z', Diacritical::Acute),
        'ź' => ('z', Diacritical::Acute),

        'Â' => ('A', Diacritical::Circumflex),
        'â' => ('a', Diacritical::Circumflex),
        'Ĉ' => ('C', Diacritical::Circumflex),
        'ĉ' => ('c', Diacritical::Circumflex),
        'Ê' => ('E', Diacritical::Circumflex),
        'ê' => ('e', Diacritical::Circumflex),
        'Ĝ' => ('G', Diacritical::Circumflex),
        'ĝ' => ('g', Diacritical::Circumflex),
        'Ĥ' => ('H', Diacritical::Circumflex),
        'ĥ' => ('h', Diacritical::Circumflex),
        'Î' => ('I', Diacritical::Circumflex),
        'î' => ('i', Diacritical::Circumflex),
        'Ĵ' => ('J', Diacritical::Circumflex),
        'ĵ' => ('j', Diacritical::Circumflex),
        'Ô' => ('O', Diacritical::Circumflex),
        'ô' => ('o', Diacritical::Circumflex),
        'Ŝ' => ('S', Diacritical::Circumflex),
        'ŝ' => ('s', Diacritical::Circumflex),
        'Û' => ('U', Diacritical::Circumflex),
        'û' => ('u', Diacritical::Circumflex),
        'Ŵ' => ('W', Diacritical::Circumflex),
        'ŵ' => ('w', Diacritical::Circumflex),
        'Ŷ' => ('Y', Diacritical::Circumflex),
        'ŷ' => ('y', Diacritical::Circumflex),
        'Ẑ' => ('Z', Diacritical::Circumflex),
        'ẑ' => ('z', Diacritical::Circumflex),

        'Ã' => ('A', Diacritical::Tilde),
        'ã' => ('a', Diacritical::Tilde),
        'Ẽ' => ('E', Diacritical::Tilde),
        'ẽ' => ('e', Diacritical::Tilde),
        'Ĩ' => ('I', Diacritical::Tilde),
        'ĩ' => ('i', Diacritical::Tilde),
        'Ñ' => ('N', Diacritical::Tilde),
        'ñ' => ('n', Diacritical::Tilde),
        'Õ' => ('O', Diacritical::Tilde),
        'õ' => ('o', Diacritical::Tilde),
        'Ũ' => ('U', Diacritical::Tilde),
        'ũ' => ('u', Diacritical::Tilde),
        'Ṽ' => ('V', Diacritical::Tilde),
        'ṽ' => ('v', Diacritical::Tilde),
        'Ỹ' => ('Y', Diacritical::Tilde),
        'ỹ' => ('y', Diacritical::Tilde),

        'Ā' => ('A', Diacritical::Macron),
        'ā' => ('a', Diacritical::Macron),
        'Ē' => ('E', Diacritical::Macron),
        'ē' => ('e', Diacritical::Macron),
        'Ḡ' => ('G', Diacritical::Macron),
        'ḡ' => ('g', Diacritical::Macron),
        'Ī' => ('I', Diacritical::Macron),
        'ī' => ('i', Diacritical::Macron),
        'Ō' => ('O', Diacritical::Macron),
        'ō' => ('o', Diacritical::Macron),
        'Ū' => ('U', Diacritical::Macron),
        'ū' => ('u', Diacritical::Macron),
        'Ȳ' => ('Y', Diacritical::Macron),
        'ȳ' => ('y', Diacritical::Macron),

        'Ă' => ('A', Diacritical::Breve),
        'ă' => ('a', Diacritical::Breve),
        'Ĕ' => ('E', Diacritical::Breve),
        'ĕ' => ('e', Diacritical::Breve),
        'Ğ' => ('G', Diacritical::Breve),
        'ğ' => ('g', Diacritical::Breve),
        'Ĭ' => ('I', Diacritical::Breve),
        'ĭ' => ('i', Diacritical::Breve),
        'Ŏ' => ('O', Diacritical::Breve),
        'ŏ' => ('o', Diacritical::Breve),
        'Ŭ' => ('U', Diacritical::Breve),
        'ŭ' => ('u', Diacritical::Breve),

        'Ȧ' => ('A', Diacritical::Dot),
        'ȧ' => ('a', Diacritical::Dot),
        'Ḃ' => ('B', Diacritical::Dot),
        'ḃ' => ('b', Diacritical::Dot),
        'Ċ' => ('C', Diacritical::Dot),
        'ċ' => ('c', Diacritical::Dot),
        'Ḋ' => ('D', Diacritical::Dot),
        'ḋ' => ('d', Diacritical::Dot),
        'Ė' => ('E', Diacritical::Dot),
        'ė' => ('e', Diacritical::Dot),
        'Ḟ' => ('F', Diacritical::Dot),
        'ḟ' => ('f', Diacritical::Dot),
        'Ġ' => ('G', Diacritical::Dot),
        'ġ' => ('g', Diacritical::Dot),
        'Ḣ' => ('H', Diacritical::Dot),
        'ḣ' => ('h', Diacritical::Dot),
        'İ' => ('I', Diacritical::Dot),
        'Ṁ' => ('M', Diacritical::Dot),
        'ṁ' => ('m', Diacritical::Dot),
        'Ṅ' => ('N', Diacritical::Dot),
        'ṅ' => ('n', Diacritical::Dot),
        'Ȯ' => ('O', Diacritical::Dot),
        'ȯ' => ('o', Diacritical::Dot),
        'Ṗ' => ('P', Diacritical::Dot),
        'ṗ' => ('p', Diacritical::Dot),
        'Ṙ' => ('R', Diacritical::Dot),
        'ṙ' => ('r', Diacritical::Dot),
        'Ṡ' => ('S', Diacritical::Dot),
        'ṡ' => ('s', Diacritical::Dot),
        'Ṫ' => ('T', Diacritical::Dot),
        'ṫ' => ('t', Diacritical::Dot),
        'Ẇ' => ('W', Diacritical::Dot),
        'ẇ' => ('w', Diacritical::Dot),
        'Ẋ' => ('X', Diacritical::Dot),
        'ẋ' => ('x', Diacritical::Dot),
        'Ẏ' => ('Y', Diacritical::Dot),
        'ẏ' => ('y', Diacritical::Dot),
        'Ż' => ('Z', Diacritical::Dot),
        'ż' => ('z', Diacritical::Dot),

        'Ä' => ('A', Diacritical::Umlaut),
        'ä' => ('a', Diacritical::Umlaut),
        'Ë' => ('E', Diacritical::Umlaut),
        'ë' => ('e', Diacritical::Umlaut),
        'Ḧ' => ('H', Diacritical::Umlaut),
        'ḧ' => ('h', Diacritical::Umlaut),
        'Ï' => ('I', Diacritical::Umlaut),
        'ï' => ('i', Diacritical::Umlaut),
        'Ö' => ('O', Diacritical::Umlaut),
        'ö' => ('o', Diacritical::Umlaut),
        'ẗ' => ('t', Diacritical::Umlaut),
        'Ü' => ('U', Diacritical::Umlaut),
        'ü' => ('u', Diacritical::Umlaut),
        'Ẅ' => ('W', Diacritical::Umlaut),
        'ẅ' => ('w', Diacritical::Umlaut),
        'Ẍ' => ('X', Diacritical::Umlaut),
        'ẍ' => ('x', Diacritical::Umlaut),
        'Ÿ' => ('Y', Diacritical::Umlaut),
        'ÿ' => ('y', Diacritical::Umlaut),

        'Ạ' => ('A', Diacritical::DotBelow),
        'ạ' => ('a', Diacritical::DotBelow),
        'Ḅ' => ('B', Diacritical::DotBelow),
        'ḅ' => ('b', Diacritical::DotBelow),
        'Ḍ' => ('D', Diacritical::DotBelow),
        'ḍ' => ('d', Diacritical::DotBelow),
        'Ẹ' => ('E', Diacritical::DotBelow),
        'ẹ' => ('e', Diacritical::DotBelow),
        'Ḥ' => ('H', Diacritical::DotBelow),
        'ḥ' => ('h', Diacritical::DotBelow),
        'Ị' => ('I', Diacritical::DotBelow),
        'ị' => ('i', Diacritical::DotBelow),
        'Ḳ' => ('K', Diacritical::DotBelow),
        'ḳ' => ('k', Diacritical::DotBelow),
        'Ḷ' => ('L', Diacritical::DotBelow),
        'ḷ' => ('l', Diacritical::DotBelow),
        'Ṃ' => ('M', Diacritical::DotBelow),
        'ṃ' => ('m', Diacritical::DotBelow),
        'Ṇ' => ('N', Diacritical::DotBelow),
        'ṇ' => ('n', Diacritical::DotBelow),
        'Ọ' => ('O', Diacritical::DotBelow),
        'ọ' => ('o', Diacritical::DotBelow),
        'Ṛ' => ('R', Diacritical::DotBelow),
        'ṛ' => ('r', Diacritical::DotBelow),
        'Ṣ' => ('S', Diacritical::DotBelow),
        'ṣ' => ('s', Diacritical::DotBelow),
        'Ṭ' => ('T', Diacritical::DotBelow),
        'ṭ' => ('t', Diacritical::DotBelow),
        'Ụ' => ('U', Diacritical::DotBelow),
        'ụ' => ('u', Diacritical::DotBelow),
        'Ṿ' => ('V', Diacritical::DotBelow),
        'ṿ' => ('v', Diacritical::DotBelow),
        'Ẉ' => ('W', Diacritical::DotBelow),
        'ẉ' => ('w', Diacritical::DotBelow),
        'Ỵ' => ('Y', Diacritical::DotBelow),
        'ỵ' => ('y', Diacritical::DotBelow),
        'Ẓ' => ('Z', Diacritical::DotBelow),
        'ẓ' => ('z', Diacritical::DotBelow),

        'Å' => ('A', Diacritical::Ring),
        'å' => ('a', Diacritical::Ring),
        'Ů' => ('U', Diacritical::Ring),
        'ů' => ('u', Diacritical::Ring),
        'ẘ' => ('w', Diacritical::Ring),
        'ẙ' => ('y', Diacritical::Ring),

        'Ç' => ('C', Diacritical::Cedilla),
        'ç' => ('c', Diacritical::Cedilla),
        'Ḑ' => ('D', Diacritical::Cedilla),
        'ḑ' => ('d', Diacritical::Cedilla),
        'Ȩ' => ('E', Diacritical::Cedilla),
        'ȩ' => ('e', Diacritical::Cedilla),
        'Ģ' => ('G', Diacritical::Cedilla),
        'ģ' => ('g', Diacritical::Cedilla),
        'Ḩ' => ('H', Diacritical::Cedilla),
        'ḩ' => ('h', Diacritical::Cedilla),
        'Ķ' => ('K', Diacritical::Cedilla),
        'ķ' => ('k', Diacritical::Cedilla),
        'Ļ' => ('L', Diacritical::Cedilla),
        'ļ' => ('l', Diacritical::Cedilla),
        'Ņ' => ('N', Diacritical::Cedilla),
        'ņ' => ('n', Diacritical::Cedilla),
        'Ŗ' => ('R', Diacritical::Cedilla),
        'ŗ' => ('r', Diacritical::Cedilla),
        'Ş' => ('S', Diacritical::Cedilla),
        'ş' => ('s', Diacritical::Cedilla),
        'Ţ' => ('T', Diacritical::Cedilla),
        'ţ' => ('t', Diacritical::Cedilla),

        'Ő' => ('O', Diacritical::DoubleAcute),
        'ő' => ('o', Diacritical::DoubleAcute),
        'Ű' => ('U', Diacritical::DoubleAcute),
        'ű' => ('u', Diacritical::DoubleAcute),

        'Ą' => ('A', Diacritical::Ogonek),
        'ą' => ('a', Diacritical::Ogonek),
        'Ę' => ('E', Diacritical::Ogonek),
        'ę' => ('e', Diacritical::Ogonek),
        'Į' => ('I', Diacritical::Ogonek),
        'į' => ('i', Diacritical::Ogonek),
        'Ǫ' => ('O', Diacritical::Ogonek),
        'ǫ' => ('o', Diacritical::Ogonek),
        'Ų' => ('U', Diacritical::Ogonek),
        'ų' => ('u', Diacritical::Ogonek),

        'Ǎ' => ('A', Diacritical::Caron),
        'ǎ' => ('a', Diacritical::Caron),
        'Č' => ('C', Diacritical::Caron),
        'č' => ('c', Diacritical::Caron),
        'Ď' => ('D', Diacritical::Caron),
        'ď' => ('d', Diacritical::Caron),
        'Ě' => ('E', Diacritical::Caron),
        'ě' => ('e', Diacritical::Caron),
        'Ǧ' => ('G', Diacritical::Caron),
        'ǧ' => ('g', Diacritical::Caron),
        'Ȟ' => ('H', Diacritical::Caron),
        'ȟ' => ('h', Diacritical::Caron),
        'Ǐ' => ('I', Diacritical::Caron),
        'ǐ' => ('i', Diacritical::Caron),
        'ǰ' => ('j', Diacritical::Caron),
        'Ǩ' => ('K', Diacritical::Caron),
        'ǩ' => ('k', Diacritical::Caron),
        'Ľ' => ('L', Diacritical::Caron),
        'ľ' => ('l', Diacritical::Caron),
        'Ň' => ('N', Diacritical::Caron),
        'ň' => ('n', Diacritical::Caron),
        'Ǒ' => ('O', Diacritical::Caron),
        'ǒ' => ('o', Diacritical::Caron),
        'Ř' => ('R', Diacritical::Caron),
        'ř' => ('r', Diacritical::Caron),
        'Š' => ('S', Diacritical::Caron),
        'š' => ('s', Diacritical::Caron),
        'Ť' => ('T', Diacritical::Caron),
        'ť' => ('t', Diacritical::Caron),
        'Ǔ' => ('U', Diacritical::Caron),
        'ǔ' => ('u', Diacritical::Caron),
        'Ž' => ('Z', Diacritical::Caron),
        'ž' => ('z', Diacritical::Caron),

        a => (a, Diacritical::None)
    };

    let base_g0 = g0_set(base, NationalOptionCharacterSubset::None)?;

    Some((
        base_g0,
        diacritical
    ))
}

pub fn char_to_teletext(
    ch: char,
    subset: NationalOptionCharacterSubset,
    force_diacritical: Option<Diacritical>
) -> Option<(TeletextChar, CharacterSet)> {
    let tpl = g0_set(ch, subset)
        .map(|ch| (ch, CharacterSet::G0))
        .or_else(|| g2_set(ch).map(|ch| (ch, CharacterSet::G2)))
        .or_else(|| g3_set(ch).map(|ch| (ch, CharacterSet::G3)))
        .or_else(|| {
            g0_set_with_diacriticals(ch).map(|(ch, dia)| (ch, CharacterSet::G0WithDiacritical(dia)))
        });


    if let Some(diacritical) = force_diacritical {
        match tpl {
            Some((ch, CharacterSet::G0 | CharacterSet::G0WithDiacritical(_))) => Some((ch, CharacterSet::G0WithDiacritical(diacritical))),
            a => a
        }
    } else {
        tpl
    }
}
